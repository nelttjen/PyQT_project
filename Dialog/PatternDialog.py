# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'DialogPattern.ui'
#
# Created by: PyQt5 UI code generator 5.15.5
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PIL import Image

from Utils.NameFromPath import getNameFromPath
from Utils.Pallite import createPallite
from Dialog.AgreementDialog import AgreementDialog


class DoubleClickLabel(QtWidgets.QLabel):
    single_clicked = QtCore.pyqtSignal()
    double_clicked = QtCore.pyqtSignal()

    def mousePressEvent(self, event):
        try:
            self.single_clicked.emit()
        except Exception as e:
            print(e)

    def mouseDoubleClickEvent(self, event):
        try:
            self.double_clicked.emit()
        except Exception as e:
            print(e)


class PatternDialog(QtWidgets.QDialog):

    def __init__(self, parent=None, pattern_list=None):
        super(PatternDialog, self).__init__(parent, Qt.WindowCloseButtonHint)
        self.setObjectName("Dialog")
        self.setWindowTitle('Выбор шаблона')
        self.setFixedSize(923, 750)
        # self.setWindowFlag(Qt., False)

        self.returnVal = None
        self.pattern_list = pattern_list
        self.list_patterns = []
        self.selected = None

        base = 293
        self.btn_select = QtWidgets.QPushButton(self)
        self.btn_select.resize(100, 50)
        self.btn_select.clicked.connect(self.select_click)
        self.btn_select.setText('Выбрать')
        self.btn_select.move(base, 675)

        self.btn_change = QtWidgets.QPushButton(self)
        self.btn_change.resize(100, 50)
        self.btn_change.clicked.connect(self.change_click)
        self.btn_change.setText('Изменить')
        self.btn_change.move(base + 106, 675)

        self.btn_create = QtWidgets.QPushButton(self)
        self.btn_create.resize(100, 50)
        self.btn_create.clicked.connect(self.change_click)
        self.btn_create.setText('Создать')
        self.btn_create.move(base + 212, 675)

        self.btn_delete = QtWidgets.QPushButton(self)
        self.btn_delete.resize(80, 40)
        self.btn_delete.clicked.connect(self.delete_pattern)
        self.btn_delete.move(863, 710)


        self.scrollArea = QtWidgets.QScrollArea(self)
        self.scrollArea.setWidgetResizable(True)
        self.scrollAreaWidgetContents = QtWidgets.QWidget()

        self.patterns = QtWidgets.QGridLayout(self.scrollAreaWidgetContents)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.scrollArea.setGeometry(QtCore.QRect(0, 0, 923, 590))

        self.scrollArea.setPalette(createPallite('PatternDialog'))
        self.scrollAreaWidgetContents.setPalette(createPallite('PatternDialog'))
        self.setPalette(createPallite('PatternDialog'))

        flag = True
        for j in range(1000):
            if flag:
                for i in range(3):
                    try:
                        pathToImg = f'Images/Patterns/Preview/pattern{(j * 3 + i) + 1}.png'
                        try:
                            open(pathToImg)
                        except IOError as e:
                            flag = False
                            print(e.__str__())
                            break
                        if flag:
                            pixmap = QtGui.QPixmap(pathToImg)
                            label = DoubleClickLabel()
                            label.setPixmap(pixmap)
                            label.setObjectName(f"pattern{(j * 3 + i) + 1}")
                            label.single_clicked.connect(self.select)
                            label.double_clicked.connect(self.doubleClick)
                            self.patterns.addWidget(label, j, i)

                            self.list_patterns.append([label, pathToImg, (j * 3 + i) + 1])
                    except Exception as e:
                        print(e)

    def doubleClick(self):
        try:
            for i in self.list_patterns:
                if self.sender() == i[0]:
                    self.returnVal = i[1]
                    self.accept()
        except Exception as e:
            print(e)
            self.reject()

    def updatePicture(self, id):
        for i in self.list_patterns:
            if i[2] == id:
                pixmap = QtGui.QPixmap(f'./Images/Patterns/Preview/pattern{id}.png')
                i[0].setPixmap(pixmap)

    def select(self):
        try:
            last = self.selected
            p_name = self.sender().objectName()
            if last:
                self.updatePicture(int(last.replace('pattern', '')))
            p_img = Image.open(f'./Images/Patterns/Preview/{p_name}.png')
            mask = Image.new(mode='RGB', size=(p_img.size[0] + 10, p_img.size[1] + 10), color='yellow')
            mask.paste(p_img, (5, 5))
            mask = mask.resize(p_img.size)
            mask.save('./Images/Temp/select.png')
            pixmap = QtGui.QPixmap('./Images/Temp/select.png')
            self.sender().setPixmap(pixmap)
            self.selected = p_name
        except Exception as e:
            print(e)

    def select_click(self):
        if self.selected:
            self.returnVal = '{}.png'.format(self.selected)
            self.accept()
        else:
            self.error_message()

    def change_click(self):
        pass

    def create_click(self):
        pass

    def delete_pattern(self):
        if not self.selected:
            self.error_message()
            return
        try:
            pattern = self.findPatternById(self.selected)
            if pattern:
                if pattern[5]:
                    self.error_message('Этот шаблон является базовым и не может быть удалён')
                    return
                else:
                    agreement = AgreementDialog(self,
                                                'Вы действительно хотите\n удалить этот шаблон?').exec_()
                    if agreement:
                        self.delete_script(pattern[0])
        except Exception as e:
            print(e)

    def delete_script(self, id):
        print('delete script here')

    def findPatternById(self, id):
        try:
            for i in self.pattern_list:
                if getNameFromPath(i.getObject()[0]) == id:
                    return i.getObject()
        except Exception as e:
            print(e)
            return

    def error_message(self, msg="Не выбран шаблон"):
        QtWidgets.QMessageBox.critical(self, "Ошибка ", msg, QtWidgets.QMessageBox.Ok)


    def exec_(self):
        super(PatternDialog, self).exec_()
        return self.returnVal, self.pattern_list

