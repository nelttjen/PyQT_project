# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'DialogPattern.ui'
#
# Created by: PyQt5 UI code generator 5.15.5
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os.path
import shutil

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QSize
from PIL import Image
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QPushButton, QColorDialog

from Pattern.Pattern import find_pattern_by_id
from Pattern.RegPatterns import recreate_patterns

from Utils.ChangeCSV import change_color, restore_default_csv
from Utils.DatabaseHandler import change_to_db, remove_pattern_from_db
from Utils.ImageSilect import image_select
from Utils.Pallite import create_palette
from Utils.Path import *

from Dialog.AgreementDialog import AgreementDialog
from Dialog.ChangeDialog import ChangeDialog

from Dialog.ChangeDialog import NEW_PATTERN_PATH

from Utils.Values import CREATE, CHANGE, CHANGE_DEFAULT, DEFAULT_PATTERNS_COUNT


def copy_new_pattern(pattern_id):
    pattern_name = f'pattern{int(pattern_id)}.png'
    path = './Images/Patterns/' + pattern_name
    preview_path = f'./Images/Patterns/Preview/' + pattern_name
    preview = Image.open(NEW_PATTERN_PATH)
    preview = preview.resize((284, 190))

    preview.save(preview_path)
    shutil.copy2(NEW_PATTERN_PATH, path)

    os.remove(NEW_PATTERN_PATH)


class DoubleClickLabel(QtWidgets.QLabel):
    single_clicked = QtCore.pyqtSignal()
    double_clicked = QtCore.pyqtSignal()

    def mousePressEvent(self, event):
        self.single_clicked.emit()

    def mouseDoubleClickEvent(self, event):
        self.double_clicked.emit()


class PatternDialog(QtWidgets.QDialog):
    def __init__(self, parent=None, pattern_list=None):
        super(PatternDialog, self).__init__(parent, Qt.WindowCloseButtonHint)
        self.setObjectName("PatternDialog")
        self.setWindowTitle('Выбор шаблона')
        self.setFixedSize(923, 750)

        # default
        self.returnVal = None
        self.pattern_list = pattern_list
        self.viewed_patterns = []
        self.selected = None

        # buttons
        self.btn_select = None
        self.btn_change = None
        self.btn_create = None
        self.btn_delete = None
        self.reg_buttons()

        self.color = None
        self.color_restore = None
        self.reg_color_buttons()

        self.scrollArea = QtWidgets.QScrollArea(self)
        self.scrollArea.setWidgetResizable(True)
        self.scrollAreaWidgetContents = QtWidgets.QWidget()

        self.view_patterns = QtWidgets.QGridLayout(self.scrollAreaWidgetContents)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.scrollArea.setGeometry(QtCore.QRect(0, 0, 923, 590))
        self.view_patterns.setColumnMinimumWidth(2, 0)

        self.change_palette(self.objectName())

        self.reg_pattern_view()

    def reg_buttons(self):
        base = 293
        self.btn_select = QtWidgets.QPushButton(self)
        self.btn_select.resize(100, 50)
        self.btn_select.clicked.connect(self.select_click)
        self.btn_select.setText('Выбрать')
        self.btn_select.move(base, 675)

        self.btn_change = QtWidgets.QPushButton(self)
        self.btn_change.resize(100, 50)
        self.btn_change.clicked.connect(self.change_click)
        self.btn_change.setText('Изменить')
        self.btn_change.move(base + 106, 675)

        self.btn_create = QtWidgets.QPushButton(self)
        self.btn_create.resize(100, 50)
        self.btn_create.clicked.connect(self.create_click)
        self.btn_create.setText('Создать')
        self.btn_create.move(base + 212, 675)

        self.btn_delete = QtWidgets.QPushButton(self)
        self.btn_delete.resize(40, 40)
        self.btn_delete.clicked.connect(self.delete_pattern)
        self.btn_delete.move(883, 710)
        delete_icon = QIcon('./Images/Default/trashcan.jpg')
        self.btn_delete.setIcon(delete_icon)
        self.btn_delete.setIconSize(QSize(34, 34))

    def reg_color_buttons(self):
        self.color = QPushButton(self)
        self.color.resize(30, 30)
        self.color.move(0, 720)
        self.color.clicked.connect(self.change_color)
        color_icon = QIcon('./Images/Default/palette.png')
        self.color.setIcon(color_icon)

        self.color_restore = QPushButton(self)
        self.color_restore.resize(30, 30)
        self.color_restore.move(30, 720)
        self.color_restore.setText('D')
        self.color_restore.clicked.connect(self.default_color)

    def add_widget(self, pattern, x, y):
        p_name = get_name_from_path(pattern[0])
        path = f'./Images/Patterns/Preview/{p_name}.png'
        if os.path.exists(path):
            pixmap = QtGui.QPixmap(path)
            label = DoubleClickLabel()
            label.setPixmap(pixmap)
            label.setObjectName(p_name)
            label.single_clicked.connect(self.select)
            label.double_clicked.connect(self.double_click)
            self.view_patterns.addWidget(label, x, y)
            self.viewed_patterns.append([label, path, p_name])

    def reg_pattern_view(self):
        for j in range(175):
            if j < len(self.pattern_list):
                x = j // 3
                y = j % 3
                cur_pattern = self.pattern_list[j].get_object()
                self.add_widget(cur_pattern, x, y)
            else:
                break

    def clear_pattern_view(self):
        for i in self.viewed_patterns:
            self.view_patterns.removeWidget(i[0])
        self.viewed_patterns = []

    def update_pattern_view(self):
        self.clear_pattern_view()
        self.reg_pattern_view()

    def double_click(self):
        try:
            for i in self.viewed_patterns:
                if self.sender() == i[0]:
                    self.returnVal = i[1]
                    self.accept()
        except Exception as e:
            print(e)
            self.reject()

    def update_picture(self, pattern_id):
        for i in self.viewed_patterns:
            if get_clean_id(i[2]) == str(pattern_id):
                path = f'./Images/Patterns/Preview/pattern{pattern_id}.png'
                pixmap = QtGui.QPixmap(path)
                i[0].setPixmap(pixmap)
                break

    def select(self):
        try:
            last = self.selected
            p_name = self.sender().objectName()
            if not p_name:
                p_name = last
            if last:
                self.update_picture(int(last.replace('pattern', '')))
            image_select(p_name)
            pixmap = QtGui.QPixmap('./Images/Temp/select.png')
            if self.sender().objectName():
                self.sender().setPixmap(pixmap)
            else:
                self.find_label_by_name(p_name).setPixmap(pixmap)
            self.selected = p_name
        except Exception as e:
            print(e)

    def select_click(self):
        if self.selected:
            self.returnVal = self.selected
            self.accept()
        else:
            self.error_message()

    def change_click(self):
        if self.selected:
            pattern = find_pattern_by_id(self.pattern_list, self.selected)
            mode = CHANGE_DEFAULT if pattern[5] else CHANGE
            if mode == CHANGE_DEFAULT and (pattern[1][0] or pattern[2][0]):
                new_list, has_changes, has_img_changes = ChangeDialog(self, pattern=pattern, mode=mode).exec_()
            elif mode == CHANGE:
                new_list, has_changes, has_img_changes = ChangeDialog(self, pattern=pattern, mode=mode).exec_()
            else:
                self.error_message("Этот шаблон изменить нельзя")
                return
            if has_changes:
                change_to_db(new_list)
                self.pattern_list = recreate_patterns()
            if has_img_changes:
                pattern_id = int(get_clean_id(pattern[0]))
                copy_new_pattern(pattern_id)
                self.select()
        else:
            self.error_message()

    def create_click(self):
        new_list, has_changes, has_img_changes = ChangeDialog(self, mode=CREATE).exec_()
        print(new_list)
        if has_changes:
            if os.path.exists(NEW_PATTERN_PATH):
                change_to_db(new_list)
                self.pattern_list = recreate_patterns()
                copy_new_pattern(new_list[6] + DEFAULT_PATTERNS_COUNT)
                self.update_pattern_view()
            else:
                self.error_message('При создании шаблона что-то пошло не так')

    def delete_pattern(self):
        if not self.selected:
            self.error_message()
            return
        try:
            pattern = find_pattern_by_id(self.pattern_list, self.selected)
            if pattern:
                if pattern[5]:
                    self.error_message('Этот шаблон является базовым и не может быть удалён')
                    return
                else:
                    agreement = AgreementDialog(self,
                                                'Вы действительно хотите\n удалить этот шаблон?').exec_()
                    if agreement:
                        self.delete_script(get_clean_id(pattern[0]))
        except Exception as e:
            print(e)

    def delete_script(self, pattern_id):
        remove_pattern_from_db(pattern_id)
        self.pattern_list = recreate_patterns()
        try:
            os.remove(f'./Images/Patterns/Preview/pattern{pattern_id}.png')
            os.remove(f'./Images/Patterns/pattern{pattern_id}.png')
        except FileNotFoundError:
            pass
        self.update_pattern_view()
        self.selected = None

    def error_message(self, msg="Не выбран шаблон"):
        QtWidgets.QMessageBox.critical(self, "Ошибка ", msg, QtWidgets.QMessageBox.Ok)

    def change_color(self):
        color = QColorDialog.getColor()
        if color.getRgb()[:-1] != (0, 0, 0):
            self.set_color(color)

    def set_color(self, color):
        key_id = self.objectName()
        change_color(color, key_id)
        self.change_palette(key_id)

    def default_color(self):
        sure = AgreementDialog(self, 'Вы действительно хотите\nвостановить значение по умолчанию?').exec_()
        if sure:
            key_id = self.objectName()
            restore_default_csv(key_id, isFullRestore=False)
            self.change_palette(key_id)

    def change_palette(self, key_id):
        new_palette = create_palette(key_id)
        self.scrollArea.setPalette(new_palette)
        self.scrollAreaWidgetContents.setPalette(new_palette)
        self.setPalette(new_palette)

    def find_label_by_name(self, pattern_name):
        for i in self.viewed_patterns:
            if i[2] == pattern_name:
                return i[0]

    def exec_(self):
        super(PatternDialog, self).exec_()
        print(self.returnVal)
        return self.returnVal, self.pattern_list
